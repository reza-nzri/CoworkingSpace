import { useRouter } from 'next/navigation';
import Cookies from 'js-cookie';
import { jwtDecode, JwtPayload } from 'jwt-decode';

// Define a type for the custom JWT payload
export type CustomJwtPayload = JwtPayload & {
  roles?: string[];
};

// Custom hook for handling authentication redirects
export const useHandleAuthenticationRedirect = () => {
  const router = useRouter();

  return () => {
    const token = Cookies.get('jwt');

    if (!token) {
      router.push('/login');
      return;
    }

    try {
      // Decode JWT to extract roles from the token payload
      const decoded: CustomJwtPayload = jwtDecode<CustomJwtPayload>(token);

      // Extract roles from the claims using the correct URI key
      const roles = decoded.roles || [];

      // Debugging to verify JWT structure and extracted roles
      console.log('Decoded JWT:', decoded);
      console.log('Roles:', roles);

      // Handle case where no roles are found
      if (!Array.isArray(roles) || roles.length === 0) {
        throw new Error('authUtils: No roles assigned to this account.');
      }

      // Define redirection paths based on roles
      const rolePaths: Record<string, string> = {
        Admin: '/admin',
        NormalUser: '/profile',
        CEO: '/ceo',
      };

      // Redirect based on the first role found
      const userRoute = roles.find((role) => rolePaths[role]) || '/';
      router.push(userRoute);

      console.log('Decoded JWT:', decoded);
      console.log('Roles:', roles);
    } catch (error) {
      console.error('Invalid or expired token:', error);
      Cookies.remove('jwt');  // Clear invalid token
      router.push('/login');  // Redirect to login if token is invalid
    }
  };
};
