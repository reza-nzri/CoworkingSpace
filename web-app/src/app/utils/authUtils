import { useRouter } from 'next/navigation';
import Cookies from 'js-cookie';
import { jwtDecode, JwtPayload } from 'jwt-decode';

// Define a type for the custom JWT payload
export type CustomJwtPayload = JwtPayload & {
  role?: string;
};

// Custom hook for handling authentication redirects
export const useHandleAuthenticationRedirect = () => {
  const router = useRouter();

  return () => {
    const token = Cookies.get('jwt');

    if (!token) {
      router.push('/login');
      return;
    }

    try {
      const decoded: CustomJwtPayload = jwtDecode<CustomJwtPayload>(token);
      const role = decoded.role;

      if (!role) {
        throw new Error('No roles assigned to this account.');
      }

      const rolePaths: Record<string, string> = {
        Admin: '/admin',
        NormalUser: '/profile',
      };

      router.push(rolePaths[role] || '/');
    } catch (error) {
      console.error('Invalid or expired token:', error);
      router.push('/login'); // Redirect to login if token is invalid
    }
  };
};
